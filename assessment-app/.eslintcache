[{"C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\index.js":"1","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\App.js":"2","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\reportWebVitals.js":"3","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\home\\Home.jsx":"4","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\Navbar\\NavBar.jsx":"5","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\LogIn\\LogIn.jsx":"6","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\Footer\\Footer.jsx":"7","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\signUp\\SignUp.jsx":"8","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\backOffice\\BackOffice.jsx":"9","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\main\\Main.jsx":"10","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\assessment\\Assessment.jsx":"11","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\CRUDFunctions.jsx":"12","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\validationUntilites.jsx":"13"},{"size":500,"mtime":499162500000,"results":"14","hashOfConfig":"15"},{"size":2116,"mtime":1610107412952,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":1003,"mtime":1610123441552,"results":"18","hashOfConfig":"15"},{"size":2443,"mtime":1610116564842,"results":"19","hashOfConfig":"15"},{"size":3211,"mtime":1610109942013,"results":"20","hashOfConfig":"15"},{"size":135,"mtime":1610123311134,"results":"21","hashOfConfig":"15"},{"size":18684,"mtime":1610102468288,"results":"22","hashOfConfig":"15"},{"size":159,"mtime":1610061354991,"results":"23","hashOfConfig":"15"},{"size":5026,"mtime":1610123453571,"results":"24","hashOfConfig":"15"},{"size":8221,"mtime":1610123911202,"results":"25","hashOfConfig":"15"},{"size":1638,"mtime":1610118065145,"results":"26","hashOfConfig":"15"},{"size":1155,"mtime":1610066863096,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"j3w9pi",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\index.js",[],["58","59"],"C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\App.js",[],"C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\reportWebVitals.js",[],"C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\home\\Home.jsx",["60"],"C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\Navbar\\NavBar.jsx",["61","62","63","64","65"],"import React, { useEffect, useState } from \"react\";\r\nimport { Navbar, ButtonGroup, Image, Nav, Dropdown, Button, Container, Row } from \"react-bootstrap\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport \"./navBar.css\";\r\nconst NavBar = ({ location, user, logOut }) => {\r\n  const [login, setlogin] = useState(true);\r\n  useEffect(() => {\r\n    setlogin(!login);\r\n  }, [user]);\r\n  if (location.pathname === \"/logIn\" || location.pathname === \"/signUp\" || location.pathname.includes(\"/assessment\") || location.pathname === \"/office\") {\r\n    return (\r\n      <div className='p-3'>\r\n        <Link to='/'>\r\n          <Image style={{ height: \"45px\" }} src='https://strive.school/assets/strive_white.png' alt='Strive Logo' />\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div id='navBar'>\r\n      <Navbar bg='dark' className='navbar mb-0' expand='lg'>\r\n        <Container>\r\n          <Link to='/'>\r\n            <Image style={{ height: \"35px\" }} src='https://strive.school/assets/strive_white.png' alt='Strive Logo' />\r\n          </Link>\r\n          <Container className='justify-content-end justify-content-lg-start'>\r\n            <Navbar.Toggle aria-controls='navbarSupportedContent' />\r\n            <Navbar.Collapse id='navbarSupportedContent' className='m'>\r\n              <Nav className='mr-auto'>\r\n                <Link to={login ? \"/main\" : \"/\"} className='text-decoration-none'>\r\n                  <div className='nav-link active'>Home</div>\r\n                </Link>\r\n              </Nav>\r\n              {login ? (\r\n                <Nav className='ml-auto'>\r\n                  <Link to={\"/\"} className='text-decoration-none'>\r\n                    <div className='nav-link btn-dark mr-3' onClick={logOut}>\r\n                      Log Out\r\n                    </div>\r\n                  </Link>\r\n                </Nav>\r\n              ) : (\r\n                <Nav className='ml-auto'>\r\n                  <Link to={\"/signUp\"} className='text-decoration-none'>\r\n                    <div className='nav-link btn-dark mr-3'>Sign Up</div>\r\n                  </Link>\r\n                  <Link to={\"/logIn\"} className='text-decoration-none'>\r\n                    <div className='nav-link btn-dark'>Log In</div>\r\n                  </Link>\r\n                </Nav>\r\n              )}\r\n            </Navbar.Collapse>\r\n          </Container>\r\n        </Container>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(NavBar);\r\n","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\LogIn\\LogIn.jsx",["66"],"import React, { useState } from \"react\";\r\nimport { Container, Row, Form, Button } from \"react-bootstrap\";\r\nimport { getFunction } from \"../CRUDFunctions\";\r\nimport { checkEmail, checkPassword } from \"../validationUntilites\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport \"./logInSignUp.css\";\r\n\r\nconst LogIn = ({ getId }) => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [errors, setError] = useState({ email: 0, password: 0 });\r\n  const [errMessage, setErrMessage] = useState(\"\");\r\n\r\n  const checkForm = (e) => {\r\n    e.preventDefault();\r\n    getUser();\r\n  };\r\n  const getUser = async () => {\r\n    const allUsers = await getFunction(\"candidates\");\r\n    console.log(allUsers);\r\n    if (allUsers) {\r\n      const user = allUsers.find((user) => user.email === email && user.password === password);\r\n      if (user) {\r\n        getId(user._id);\r\n        setRedirect(true);\r\n      } else {\r\n        setErrMessage(\"Email or password are incorrect\");\r\n      }\r\n    }\r\n  };\r\n  if (redirect) {\r\n    return <Redirect to='/main' />;\r\n  }\r\n  return (\r\n    <Container>\r\n      <Row id='logIn'>\r\n        <h2>Log In</h2>\r\n\r\n        <Container>\r\n          <Form onSubmit={checkForm}>\r\n            <small className={errMessage ? \"text-danger\" : \"d-none\"}> {errMessage}</small>\r\n            <Form.Group>\r\n              <Form.Label htmlFor='email'>Your email address</Form.Label>\r\n              <Form.Control\r\n                type='email'\r\n                name='email'\r\n                id='email'\r\n                autoComplete='email'\r\n                placeholder='example@example.com'\r\n                value={email}\r\n                onChange={(e) => setEmail(e.currentTarget.value)}\r\n                onBlur={(e) => setError({ email: !checkEmail(e.currentTarget.value) })}\r\n                className={errors.email ? \"error\" : \"\"}\r\n                required\r\n              />\r\n              <small className={errors.email ? \"text-danger\" : \"d-none\"}>Email should include @ . and be longer than 4 chars</small>\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label htmlFor='password'>Your password </Form.Label>\r\n              <Form.Control\r\n                type='password'\r\n                name='password'\r\n                id='password'\r\n                autoComplete='new-password'\r\n                placeholder='New Password'\r\n                value={password}\r\n                onChange={(e) => setPassword(e.currentTarget.value)}\r\n                onBlur={(e) => setError({ password: !checkPassword(e.currentTarget.value) })}\r\n                className={errors.password ? \"error\" : \"\"}\r\n                required\r\n              />\r\n              <small className={errors.password ? \"text-danger\" : \"d-none\"}>Password should be longer than 8 chars, 1 digit, 1 letter</small>\r\n            </Form.Group>\r\n            <Row>\r\n              <Button className='w-50 mt-4' type='submit' id='sign in' variant='success'>\r\n                Log in\r\n              </Button>\r\n            </Row>\r\n          </Form>\r\n        </Container>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LogIn;\r\n","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\Footer\\Footer.jsx",[],"C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\signUp\\SignUp.jsx",["67","68","69","70","71","72","73","74","75"],"import React, { useState } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { Container, Form, Row, Spinner, Col, Button, Modal, Image, Nav, Table, Alert } from 'react-bootstrap';\r\nimport { postFunction } from '../CRUDFunctions';\r\nimport { checkEmail, checkPassword, checkPostalCode } from '../validationUntilites';\r\nconst SignUp = ({ getId }) => {\r\n    const [name, setName] = useState(\"\")\r\n    const [surname, setSurname] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [yearOfBirth, setYearOfBirth] = useState(0)\r\n    const [street, setAddress] = useState(\"\")\r\n    const [city, setCity] = useState(\"\")\r\n    const [country, setCountry] = useState(\"\")\r\n    const [postalCode, setPostalCode] = useState(\"\")\r\n    const [redirect, setRedirect] = useState(false)\r\n    const [errMessage, setErrMessage] = useState(\"\")\r\n    const [errors, setErrors] = useState({\r\n        name: 0,\r\n        surname: 0,\r\n        email: 0,\r\n        password: 0,\r\n        passwordConfirm: 0,\r\n        yearOfBirth: 0,\r\n        street: 0,\r\n        country: 0,\r\n        city: 0,\r\n        postalCode: 0,\r\n    })\r\n    const [incorrect, setIncorrect] = useState(true)\r\n    const [loading, setLoading] = useState(false)\r\n    const checkForm = (e) => {\r\n        e.preventDefault()\r\n        createUser()\r\n    }\r\n    const validateForm = (e) => {\r\n        let currentId = e.currentTarget.id\r\n        let err = { ...errors }\r\n        let current = e.currentTarget.value\r\n        switch (currentId) {\r\n            case 'name':\r\n                err[currentId] = name.length <= 2 ? true : false;\r\n                break;\r\n            case 'surname':\r\n                err[currentId] = surname.length <= 3 ? true : false;\r\n                break;\r\n\r\n            case 'email':\r\n                err[currentId] = checkEmail(email) ? false : true;\r\n                break;\r\n            case 'password':\r\n                err[currentId] = checkPassword(password) ? false : true;\r\n                break;\r\n            case 'passwordConfirm':\r\n                Object.keys(err).forEach((key) => {\r\n                    switch (key) {\r\n                        case 'name':\r\n                            err[key] = name.length <= 2 ? true : false;\r\n                            break;\r\n                        case 'surname':\r\n                            err[key] = surname.length <= 3 ? true : false;\r\n                            break;\r\n                        case 'email':\r\n                            err[key] = checkEmail(email) ? false : true;\r\n                            break;\r\n                        case 'yearOfBirth':\r\n                            err[key] = yearOfBirth <= 2002 && yearOfBirth >= 1910 ? false : true;\r\n                            break;\r\n                        case 'street':\r\n                            err[key] = street.length <= 5 ? true : false;\r\n                            break;\r\n                        case 'city':\r\n                            err[key] = city.length <= 2 ? true : false;\r\n                            break;\r\n                        case 'country':\r\n                            err[key] = country.length <= 2 ? true : false;\r\n                            break;\r\n                        case 'postalCode':\r\n                            err[key] = checkPostalCode(postalCode) ? false : true;\r\n                            break;\r\n                        case 'passwordConfirm':\r\n                            err[currentId] = current === password ? false : true;\r\n                            break;\r\n                        case 'password':\r\n                            err[currentId] = checkPassword(password) ? false : true;\r\n                            break;\r\n                        default:\r\n                            console.log(\"Error occurd in Validation\")\r\n                            setErrMessage(\"Error in Validation\")\r\n                            break;\r\n                    }\r\n                })\r\n                break;\r\n            case 'yearOfBirth':\r\n                err[currentId] = yearOfBirth <= 2002 && yearOfBirth >= 1910 ? false : true;\r\n                break;\r\n            case 'street':\r\n                err[currentId] = street.length <= 5 ? true : false;\r\n                break;\r\n            case 'city':\r\n                err[currentId] = city.length <= 2 ? true : false;\r\n                break;\r\n            case 'country':\r\n                err[currentId] = country.length <= 2 ? true : false;\r\n                break;\r\n            case 'postalCode':\r\n                err[currentId] = checkPostalCode(postalCode) ? false : true;\r\n                break;\r\n            default:\r\n                console.log(\"Error occurd in Validation\")\r\n                setErrMessage(\"Error in Validation\")\r\n                break;\r\n        }\r\n        setErrors(err)\r\n        Object.values(err).every((el) => el === false) && setIncorrect(false) && setErrMessage(\"\")\r\n    }\r\n    const createUser = async () => {\r\n        const form = {\r\n            name: name,\r\n            surname: surname,\r\n            email: email,\r\n            password: password,\r\n            yearOfBirth: yearOfBirth,\r\n            street: street,\r\n            city: city,\r\n            country: country,\r\n            postalCode: postalCode\r\n        }\r\n        const candidate = await postFunction(\"candidates\", form)\r\n        if (candidate) {\r\n            getId(candidate._id)\r\n            setRedirect(true)\r\n        } else {\r\n            setErrMessage(typeof (candidate) === \"object\" ? candidate.errors[0].msg : \"Email already Used\")\r\n            setTimeout(() => {\r\n                setErrMessage(\"\")\r\n            }, 2000);\r\n        }\r\n    }\r\n    if (redirect) {\r\n        return <Redirect to=\"/main\" />\r\n    }\r\n    return <Container>\r\n\r\n        <Row id=\"signUp\">\r\n            <h2>Sign Up</h2>\r\n\r\n            <Container>\r\n                <Form onSubmit={checkForm}>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Row>\r\n                                <Col>\r\n                                    <small className={errMessage ? \"text-danger\" : \"d-none\"} > {errMessage}</small>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"name\">Name</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"name\"\r\n                                            id=\"name\"\r\n                                            autoComplete=\"given-name\"\r\n                                            placeholder=\"Your name\"\r\n                                            value={name}\r\n                                            onChange={(e) => setName(e.currentTarget.value)}\r\n                                            onBlur={validateForm}\r\n                                            className={errors.name ? \"error\" : \"\"}\r\n                                            required\r\n                                        />\r\n                                        <small className={errors.name ? \"text-danger\" : \"d-none\"} >Name should be longer than 2 chars</small>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"surname\">Surname</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"surname\"\r\n                                            id=\"surname\"\r\n                                            autoComplete=\"family-name\"\r\n                                            placeholder=\"Your surname\"\r\n                                            value={surname}\r\n                                            onChange={(e) => setSurname(e.currentTarget.value)}\r\n                                            onBlur={validateForm}\r\n                                            className={errors.surname ? \"error\" : \"\"}\r\n                                            required\r\n                                        />\r\n                                        <small className={errors.surname ? \"text-danger\" : \"d-none\"} >Surname should be longer than 3 chars</small>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md={9}>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"email\">Your email address</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            name=\"email\"\r\n                                            id=\"email\"\r\n                                            autoComplete=\"email\"\r\n                                            placeholder=\"example@example.com\"\r\n                                            value={email}\r\n                                            onChange={(e) => setEmail(e.currentTarget.value)}\r\n                                            onBlur={validateForm}\r\n                                            className={errors.email ? \"error\" : \"\"}\r\n                                            required\r\n                                        />\r\n                                        <small className={errors.email ? \"text-danger\" : \"d-none\"} >Email should include @ . and be longer than 4 chars</small>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col md={3}>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"yearOfBirth\">Year of Birth</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"number\"\r\n                                            name=\"yearOfBirth\"\r\n                                            id=\"yearOfBirth\"\r\n                                            autoComplete=\"bday-year\"\r\n                                            value={yearOfBirth}\r\n                                            onChange={(e) => setYearOfBirth(e.currentTarget.value)}\r\n                                            onBlur={validateForm}\r\n                                            placeholder=\"YYYY\"\r\n                                            className={errors.yearOfBirth ? \"error\" : \"\"}\r\n                                            required\r\n                                        />\r\n                                        <small className={errors.yearOfBirth ? \"text-danger\" : \"d-none\"} >Year of Birth should be before 2002 and after 1910</small>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md={8}>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"street\">Street Address</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"street\"\r\n                                            id=\"street\"\r\n                                            placeholder=\"Your street\"\r\n                                            value={street}\r\n                                            onChange={(e) => setAddress(e.currentTarget.value)}\r\n                                            onBlur={validateForm}\r\n                                            className={errors.street ? \"error\" : \"\"}\r\n                                            required\r\n                                        />\r\n\r\n                                        <small className={errors.street ? \"text-danger\" : \"d-none\"} >Street should be longer than 5 chars</small>                                 </Form.Group>\r\n                                </Col>\r\n\r\n                                <Col md={4}>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"postalCode\">Postal Code</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"postalCode\"\r\n                                            id=\"postalCode\"\r\n                                            placeholder=\"00000\"\r\n                                            value={postalCode}\r\n                                            onChange={(e) => setPostalCode(e.currentTarget.value)}\r\n                                            onBlur={validateForm}\r\n                                            className={errors.postalCode ? \"error\" : \"\"}\r\n                                            required\r\n                                        />\r\n\r\n                                        <small className={errors.postalCode ? \"text-danger\" : \"d-none\"} >Postal Code should be a 5 digit number and should't include chars</small>                                 </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"city\">City</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            name=\"city\"\r\n                                            id=\"city\"\r\n                                            placeholder=\"Your city\"\r\n                                            value={city}\r\n                                            onChange={(e) => setCity(e.currentTarget.value)}\r\n                                            onBlur={validateForm}\r\n                                            className={errors.city ? \"error\" : \"\"}\r\n                                            required\r\n                                        />\r\n\r\n                                        <small className={errors.city ? \"text-danger\" : \"d-none\"} >City should be longer than 2 chars</small>                                 </Form.Group>\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"country\">Country</Form.Label>\r\n                                        <Form.Control\r\n                                            minLength=\"3\"\r\n                                            name=\"country\"\r\n                                            id=\"country\"\r\n                                            autoComplete=\"country\"\r\n                                            placeholder=\"Your country\"\r\n                                            value={country}\r\n                                            onChange={(e) => setCountry(e.currentTarget.value)}\r\n                                            onBlur={validateForm}\r\n                                            className={errors.country ? \"error\" : \"\"}\r\n                                            required\r\n                                        />\r\n\r\n                                        <small className={errors.country ? \"text-danger\" : \"d-none\"} >Country should be longer then 3 letters</small>                                 </Form.Group>\r\n                                </Col>\r\n\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"password\">Your password </Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            name=\"password\"\r\n                                            id=\"password\"\r\n                                            autoComplete=\"new-password\"\r\n                                            placeholder=\"New Password\"\r\n                                            value={password}\r\n                                            onChange={(e) => setPassword(e.currentTarget.value)}\r\n                                            onBlur={validateForm}\r\n                                            className={errors.password ? \"error\" : \"\"}\r\n                                            required\r\n                                        />\r\n                                        <small className={errors.password ? \"text-danger\" : \"d-none\"} >Password should be longer than 8 chars, 1 digit, 1 letter</small>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Form.Group>\r\n                                        <Form.Label htmlFor=\"passwordConfirm\">Confirm Your password</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            name=\"passwordConfirm\"\r\n                                            autoComplete=\"new-password\"\r\n                                            id=\"passwordConfirm\"\r\n                                            placeholder=\"Re-enter password\"\r\n                                            onBlur={validateForm}\r\n                                            className={errors.passwordConfirm ? \"error\" : \"\"}\r\n                                            required\r\n                                        />\r\n                                        <small className={errors.passwordConfirm ? \"text-danger\" : \"d-none\"} >The passwords you enterd don't match</small>\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Button className=\"w-50\" type=\"submit\" id=\"sign in\" variant=\"success\" disabled={incorrect}>Sign up</Button>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n        </Row>\r\n    </Container>;\r\n}\r\n\r\nexport default SignUp;","C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\backOffice\\BackOffice.jsx",[],"C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\main\\Main.jsx",[],"C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\assessment\\Assessment.jsx",[],"C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\CRUDFunctions.jsx",[],"C:\\Users\\tyan\\Documents\\GitHub\\assesment-benchmark-platform-fe\\assessment-app\\src\\components\\validationUntilites.jsx",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":2,"column":40,"nodeType":"82","messageId":"83","endLine":2,"endColumn":43},{"ruleId":"80","severity":1,"message":"84","line":2,"column":18,"nodeType":"82","messageId":"83","endLine":2,"endColumn":29},{"ruleId":"80","severity":1,"message":"85","line":2,"column":43,"nodeType":"82","messageId":"83","endLine":2,"endColumn":51},{"ruleId":"80","severity":1,"message":"86","line":2,"column":53,"nodeType":"82","messageId":"83","endLine":2,"endColumn":59},{"ruleId":"80","severity":1,"message":"81","line":2,"column":72,"nodeType":"82","messageId":"83","endLine":2,"endColumn":75},{"ruleId":"87","severity":1,"message":"88","line":9,"column":6,"nodeType":"89","endLine":9,"endColumn":12,"suggestions":"90"},{"ruleId":"80","severity":1,"message":"91","line":5,"column":10,"nodeType":"82","messageId":"83","endLine":5,"endColumn":14},{"ruleId":"80","severity":1,"message":"91","line":2,"column":10,"nodeType":"82","messageId":"83","endLine":2,"endColumn":14},{"ruleId":"80","severity":1,"message":"92","line":3,"column":32,"nodeType":"82","messageId":"83","endLine":3,"endColumn":39},{"ruleId":"80","severity":1,"message":"93","line":3,"column":54,"nodeType":"82","messageId":"83","endLine":3,"endColumn":59},{"ruleId":"80","severity":1,"message":"94","line":3,"column":61,"nodeType":"82","messageId":"83","endLine":3,"endColumn":66},{"ruleId":"80","severity":1,"message":"95","line":3,"column":68,"nodeType":"82","messageId":"83","endLine":3,"endColumn":71},{"ruleId":"80","severity":1,"message":"96","line":3,"column":73,"nodeType":"82","messageId":"83","endLine":3,"endColumn":78},{"ruleId":"80","severity":1,"message":"97","line":3,"column":80,"nodeType":"82","messageId":"83","endLine":3,"endColumn":85},{"ruleId":"80","severity":1,"message":"98","line":31,"column":12,"nodeType":"82","messageId":"83","endLine":31,"endColumn":19},{"ruleId":"80","severity":1,"message":"99","line":31,"column":21,"nodeType":"82","messageId":"83","endLine":31,"endColumn":31},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'ButtonGroup' is defined but never used.","'Dropdown' is defined but never used.","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'login'. Either include it or remove the dependency array. You can also do a functional update 'setlogin(l => ...)' if you only need 'login' in the 'setlogin' call.","ArrayExpression",["102"],"'Link' is defined but never used.","'Spinner' is defined but never used.","'Modal' is defined but never used.","'Image' is defined but never used.","'Nav' is defined but never used.","'Table' is defined but never used.","'Alert' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},"Update the dependencies array to be: [login, user]",{"range":"105","text":"106"},[377,383],"[login, user]"]